{
  "name": "audiosource",
  "version": "1.2.1",
  "description": "utility for managing audio buffers",
  "main": "index.js",
  "scripts": {
    "browser-test": "beefy test/manual.js -- -t babelify && open http://localhost:9966",
    "test": "echo \"npm run browser-test to run manual tests\" && exit 1",
    "prepublish": "babel es6 --out-dir lib"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/meandavejustice/audiosource.git"
  },
  "keywords": [
    "audio",
    "music",
    "playback",
    "samples",
    "webaudio",
    "audio",
    "buffer",
    "game",
    "fft",
    "visualizations",
    "playback",
    "mp3",
    "wav",
    "ogg"
  ],
  "author": {
    "name": "meandave"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/meandavejustice/audiosource/issues"
  },
  "homepage": "https://github.com/meandavejustice/audiosource",
  "devDependencies": {
    "audio-fft": "^0.1.0",
    "audiocontext": "^0.1.0",
    "babel": "^5.1.11",
    "babelify": "^6.0.2",
    "beefy": "^2.1.5"
  },
  "dependencies": {
    "raf": "^2.0.4",
    "xhr": "^2.0.1"
  },
  "readme": "# AudioSource\n\n[![NPM](https://nodei.co/npm/audiosource.png?downloads=true)](https://npmjs.org/package/audiosource)\n\nA simple utility to manage audio buffers.\n\nThe goal of AudioSource is to provide a simple interface to managing playback of audio source nodes. This includes\ntracking playback times, pause, resume, stop, and seeking.\n\n## Usage\n\n### Initialize:\n\n``` javascript\nvar AudioSource = require('audiosource');\nvar context = new AudioContext();\nvar FFT = require('audio-fft');\nvar ffts = [new FFT(...), new FFT(...)];\n\nvar src = new AudioSource({\n  context: context, // this is just a standard web audio context REQUIRED\n  url: 'path/to/audiofile.ogg', // OPTIONAL if you want to set your own webaudiobufferobject\n  gainNode: context.createGain() // OPTIONAL\n  nodes: ffts // OPTIONAL, must pass gainNode if using this option.\n  buffer: webaudiobufferobject //OPTIONAL\n});\n```\n\n*note* \"ffts\" refers to [this package](https://github.com/meandavejustice/audio-fft)\n\n### Load Audio:\n\nLoad from an xhr request or from file(useful when running in an electron app).\n\n`load` falls back to `read` if xhr request fails\n\n``` javascript\nvar AudioSource = require('audiosource');\nvar context = new AudioContext();\nvar src = new AudioSource({\n  context: context,\n  url: 'path/to/audiofile.ogg'\n});\n\nsrc.load(null, function(err, src) { // optionally takes a url and callback\n  if (err) console.error('ya goofed... ', err);\n  src.play();\n});\n\nsrc.read('path/to/file.ogg', function(err, src) { // takes a filepath and an optional callback\n  if (err) console.error('ya goofed... ', err);\n  src.play();\n});\n```\n### Playback:\n\n``` javascript\n\nsrc.load(null, function(err, src) {\n  if (err) console.error('ya goofed... ', err);\n\n  src.play(); // takes an optional time offset and starts playback\n\n  src.pause(); // pause playback\n\n  src.stop(); // stop playback\n\n  src.seek(-5.2); // takes positive or negative float. Seeks in track.\n\n  src.skip(10.13); // skips ahead OPTIONAL float argument DEFAULTS to 5 seconds.\n\n  src.back(10.13); // skips behind OPTIONAL float argument DEFAULTS to -5 seconds.\n});\n```\n\n### Insight:\n\nThere are a couple of ways to get insight into playback.\n\nUseful Properties:\n* `playing` Boolean\n* `buffer` [audio buffer](http://www.w3.org/TR/webaudio/#AudioBuffer)\n* `source` [audio source](http://www.w3.org/TR/webaudio/#AudioBufferSourceNode)\n\n``` javascript\n\nsrc.load(null, function(err, src) {\n  if (err) console.error('ya goofed... ', err);\n\n  src.play();\n\n  src.time();\n});\n```\n\n`src.time()` returns:\n``` json\n{\n  \"current\": 2.048,\n  \"remaining\": 3.01975,\n  \"percent\": \"40.41%\",\n  \"total\": 5.06775\n}\n```\nAudioSource is also an [EventEmitter](https://iojs.org/api/events.html#events_class_events_eventemitter)\n\nEvents:\n* `play`\n* `pause`\n* `load`\n* `stop`\n* `pause`\n* `skip`\n* `back`\n* `remove`\n* `time`\n\n``` javascript\n\nlet src = new AudioSource({url: 'goth-easter_littlestar.mp3', context: context});\nsrc.on('load', function(obj) {\n  window.alert(JSON.stringify(obj));\n})\nsrc.load();\n```\n\nAll events (with exception to error) emit the time object.\n\n# LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Dave Justice\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "gitHead": "4a91b8d71629bd6f36fd92122f37696f8b07347f",
  "_id": "audiosource@1.2.1",
  "_shasum": "6750639836fdb9d814593ee1bd28df78ea21e436",
  "_from": "audiosource@*"
}
